{"version":3,"sources":["components/Header.js","helpers.js","components/Order.js","components/AddFishForm.js","components/EditFishForm.js","components/Login.js","base.js","components/Inventory.js","sample-fishes.js","components/Fish.js","components/App.js","components/StorePicker.js","components/NotFound.js","components/Router.js","index.js"],"names":["Header","props","className","tagline","formatPrice","cents","toLocaleString","style","currency","rando","arr","Math","floor","random","length","getFunName","adjectives","Order","renderOrder","key","fish","fishes","count","order","isAvailable","status","cssTransitionOptions","classNames","timeout","enter","exit","component","name","price","onClick","removeFromOrder","orderIds","Object","keys","this","total","reduce","prevTotal","map","React","Component","AddFishForm","nameRef","createRef","priceRef","statusRef","descRef","imageRef","createFish","event","preventDefault","current","value","parseFloat","desc","image","addFish","currentTarget","reset","onSubmit","ref","type","placeholder","EditFishForm","handleChange","console","log","updatedFish","updateFish","index","onChange","deleteFish","Login","authenticate","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","base","Rebase","createClass","database","Inventory","state","uid","owner","authHandler","authData","a","fetch","storeId","context","store","post","data","user","setState","provider","authProvider","auth","signInWithPopup","then","logout","signOut","onAuthStateChanged","loadSampleFishes","fish1","fish2","fish3","fish4","fish5","fish6","fish7","fish8","fish9","Fish","handleClick","addToOrder","details","src","alt","disabled","App","Date","now","sampleFishes","params","match","localStorageRef","localStorage","getItem","JSON","parse","syncState","setItem","stringify","removeBinding","age","StorePicker","myInput","goToStore","storeName","history","push","required","defaultValue","NotFound","Router","BrowserRouter","Switch","Route","exact","path","render","document","querySelector"],"mappings":"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","file":"static/js/main.36724e0c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n// can change it to an implicit return:\nconst Header = (props) => (\n    <header className=\"top\">\n        <h1>\n          Catch \n          <span className=\"ofThe\">\n            <span className=\"of\">Of </span>\n            <span className=\"the\">The</span> \n          </span>\n          Day\n       </h1>\n        <h3 className=\"tagline\">\n          <span>{props.tagline}</span>\n        </h3>\n      </header>\n  );\n\n  Header.propTypes = {\n    tagline: PropTypes.string.isRequired\n  }\n// if you have more than one argument, you can destructure \n//    the props into their own variables\n// then you don't need the 'props.' when you assign it in the \n//    attribute\n// const Header = ({tagline, age}) => (\n//   <header className=\"top\">\n//       <h1>\n//         Catch \n//         <span className=\"ofThe\">\n//           <span className=\"of\">Of </span>\n//           <span className=\"the\">The</span> \n//         </span>\n//         Day\n//      </h1>\n//       <h3 className=\"tagline\">\n// <span>{tagline}{100  }</span>\n//       </h3>\n//     </header>\n// )\n\nexport default Header;\n\n\n// Other ways to create components\n// class Header extends React.Component {\n//   render() {\n//     return (\n//       <header className=\"top\">\n//         <h1>\n//           Catch \n//           <span className=\"ofThe\">\n//             <span className=\"of\">Of </span>\n//             <span className=\"the\">The</span> \n//           </span>\n//           Day\n//        </h1>\n//         <h3 className=\"tagline\">\n//           <span>{this.props.tagline}</span>\n//         </h3>\n//       </header>\n//     )\n//   }\n// }\n\n// 'this' is going to be the component instance- meaning \n//    whatever got passed in when it was used \n// .props is going to be an object inside of the component which\n//    contains all of our final properties, so tagline, age, cool\n// \n// in react dev tools if you click on any compnent, it'll say it equals $r\n//  whatever you have clicked that =$r, you can type $r in console and\n//    that will be component \n\n// ==== Stateless Functional Components ====\n// if a component doesn't really 'do anything' and they have\n//  the data fed to them.  There's no need for it to be a full \n//  blown react component, it just renders out some HTML.\n// If your component only has a render method and prop-types\n//  then its unnecessary to do the full way to create a component.\n//  --- we can convert it over to a Stateless Functional Component\n//  \n// function Header(props) {\n//   return (\n//     <header className=\"top\">\n//         <h1>\n//           Catch \n//           <span className=\"ofThe\">\n//             <span className=\"of\">Of </span>\n//             <span className=\"the\">The</span> \n//           </span>\n//           Day\n//        </h1>\n//         <h3 className=\"tagline\">\n//           <span>{props.tagline}</span>\n//         </h3>\n//       </header>\n//   )\n// }\n// can make this as an arrow function:\n// const Header = (props) => {\n//   return (\n//     <header className=\"top\">\n//         <h1>\n//           Catch \n//           <span className=\"ofThe\">\n//             <span className=\"of\">Of </span>\n//             <span className=\"the\">The</span> \n//           </span>\n//           Day\n//        </h1>\n//         <h3 className=\"tagline\">\n//           <span>{props.tagline}</span>\n//         </h3>\n//       </header>\n//   )\n// }","// ==== Helper and Utility Functions\n// Helper functions that do something but aren't necessarily related to\n//    react.  helper.js\n// Utility Functions, functions that are helpful to doing tasks\n//  and are functions we use over in varous projects. utils.js\n\nexport function formatPrice(cents) {\n  return (cents / 100).toLocaleString(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  });\n}\n\nexport function rando(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}\n\nexport function slugify(text) {\n  return text\n    .toString()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]+/g, \"\")\n    .replace(/--+/g, \"-\")\n    .replace(/^-+/, \"\")\n    .replace(/-+$/, \"\");\n}\n\nexport function getFunName() {\n  const adjectives = [\n    \"adorable\",\n    \"beautiful\",\n    \"clean\",\n    \"drab\",\n    \"elegant\",\n    \"fancy\",\n    \"glamorous\",\n    \"handsome\",\n    \"long\",\n    \"magnificent\",\n    \"old-fashioned\",\n    \"plain\",\n    \"quaint\",\n    \"sparkling\",\n    \"ugliest\",\n    \"unsightly\",\n    \"angry\",\n    \"bewildered\",\n    \"clumsy\",\n    \"defeated\",\n    \"embarrassed\",\n    \"fierce\",\n    \"grumpy\",\n    \"helpless\",\n    \"itchy\",\n    \"jealous\",\n    \"lazy\",\n    \"mysterious\",\n    \"nervous\",\n    \"obnoxious\",\n    \"panicky\",\n    \"repulsive\",\n    \"scary\",\n    \"thoughtless\",\n    \"uptight\",\n    \"worried\"\n  ];\n\n  const nouns = [\n    \"women\",\n    \"men\",\n    \"children\",\n    \"teeth\",\n    \"feet\",\n    \"people\",\n    \"leaves\",\n    \"mice\",\n    \"geese\",\n    \"halves\",\n    \"knives\",\n    \"wives\",\n    \"lives\",\n    \"elves\",\n    \"loaves\",\n    \"potatoes\",\n    \"tomatoes\",\n    \"cacti\",\n    \"foci\",\n    \"fungi\",\n    \"nuclei\",\n    \"syllabuses\",\n    \"analyses\",\n    \"diagnoses\",\n    \"oases\",\n    \"theses\",\n    \"crises\",\n    \"phenomena\",\n    \"criteria\",\n    \"data\"\n  ];\n\n  return `${rando(adjectives)}-${rando(adjectives)}-${rando(nouns)}`;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {formatPrice} from '../helpers';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nclass Order extends React.Component {\n  static propTypes = {\n    fishes: PropTypes.object,\n    order: PropTypes.object,\n    removeFromOrder: PropTypes.func,\n  }\n// this is a made up name for a 2nd render function\n  renderOrder = key => {\n    const fish = this.props.fishes[key];\n    const count = this.props.order[key];\n   \n    // we're trying to render out order before fishes actually exist- \n    //   it takes a split second to go to Firebase to get our database\n   // adding fish && helps but there is a lag for getting our information\n    const isAvailable = fish && fish.status === \"available\";\n    const cssTransitionOptions = {\n      classNames: \"order\",\n      key,\n      timeout: { enter: 500, exit: 500 }\n    };\n    // if there is no fish, it will return absolutely nothing- make sure\n    //  the fish is loaded before continuing\n    if (!fish) return null;\n\n    if (!isAvailable) {\n      return (\n        <CSSTransition {...cssTransitionOptions}>\n          <li key={key}>\n            Sorry {fish ? fish.name : \"fish\"} is no longer available\n          </li>\n        </CSSTransition>\n      );\n    }\n    return (\n      // CSSTransition takes a number of different properies\n      //  classNames, key, timeout\n      <CSSTransition {...cssTransitionOptions}>\n        <li key={key}>\n          <span>\n            <TransitionGroup component=\"span\" className=\"count\">\n              <CSSTransition\n                classNames=\"count\"\n                key={count}\n                timeout={{ enter: 500, exit: 500 }}\n              >\n                <span>{count}</span>\n              </CSSTransition>\n            </TransitionGroup>\n            lbs {fish.name}\n            {formatPrice(count * fish.price)}\n            <button onClick={() => this.props.removeFromOrder(key)}>\n              &times;\n            </button>\n          </span>\n        </li>\n      </CSSTransition>\n    );\n  };\n  render() {\n    const orderIds = Object.keys(this.props.order);\n    const total = orderIds.reduce((prevTotal, key) => {\n      const fish = this.props.fishes[key];\n      const count = this.props.order[key];\n      const isAvailable = fish && fish.status === \"available\";\n      if (isAvailable) {\n        return prevTotal + count * fish.price;\n      }\n      return prevTotal;\n    }, 0);\n    return (\n      <div className=\"order-wrap\">\n        <h2>Order</h2>\n        <TransitionGroup component=\"ul\" className=\"order\">\n          {orderIds.map(this.renderOrder)}\n        </TransitionGroup>\n        <div className=\"total\">\n          Total:\n          <strong>{formatPrice(total)}</strong>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Order;\n\n// when you find your render function is having too much in it,\n// it probably means you are doing too much in a specific component.\n// and you prob could shell off some of the complexity to a separate\n// component\n// But sometimes it doesn't make sense to farm out something into\n//   its own component if you're not going to be using it anywhere else\n//\n// You can make separate function inside of a single component","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddFishForm extends React.Component {\n  nameRef = React.createRef();\n  priceRef = React.createRef();\n  statusRef = React.createRef();\n  descRef = React.createRef();\n  imageRef = React.createRef();\n\n  static propTypes = {\n    addFish: PropTypes.func\n  }\n  \n  createFish = (event) => {\n    // 1. stop the form from submitting\n    event.preventDefault();\n    // how do we get fish into state and where does state live? Every component in react can have its own state. Its often the case where you have one parent state on a higher component and then you pass that state down to the children.\n    // right now this fish object is limited to only this AddFishForm component, if we want to give it to order and inventory and the menu-- there's no way to share the data with those other components-- unless the data lives at a higher level.\n    // We want the data to live in App- its the highest level and can then pass any data down to the children\n    // 2. pull all values out of the different inputs\n    const fish = {\n      name : this.nameRef.current.value,\n      price : parseFloat(this.priceRef.current.value),\n      status : this.statusRef.current.value,\n      desc : this.descRef.current.value,\n      image : this.imageRef.current.value,\n    \n    \n    }\n    // we pass the addFish method our fish object\n   this.props.addFish(fish);\n   // refresh the form\n    event.currentTarget.reset();\n\n  }\n  render() {\n    return (  \n      // when someone submits this form, we need to turn all of \n      //  the inputs into a fish object.\n    <form className=\"fish-edit\" onSubmit={this.createFish}>\n     <input name=\"name\" ref={this.nameRef} type=\"text\" placeholder=\"Name\"/>\n     <input name=\"price\" ref={this.priceRef} type=\"text\" placeholder=\"Price\"/>\n     <select name=\"status\" ref={this.statusRef}>\n       <option value=\"available\">Fresh!</option>\n       <option value=\"unavailable\">Sold Out!</option>\n     </select>\n     <textarea name=\"desc\" ref={this.descRef} placeholder=\"Desc\"/>\n     <input name=\"image\" ref={this.imageRef} type=\"text\" placeholder=\"Image\"/>\n     <button type=\"submit\"> + Add Fish </button>\n    </form>\n    )\n  }\n}\n\nexport default AddFishForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass EditFishForm extends React.Component {\n  static propTypes = {\n    fish: PropTypes.shape({\n      image: PropTypes.string,\n      name: PropTypes.string,\n      desc: PropTypes.string, \n      status: PropTypes.string,\n      price: PropTypes.number,\n    }),\n    updateFish: PropTypes.func,\n    index: PropTypes.string,\n    deleteFish: PropTypes.func,\n  }\n  handleChange = (event) =>{\n    console.log(event.currentTarget.value);\n    const updatedFish = {\n      ...this.props.fish,\n      // gets the exact input that was edited and changed with the value entered\n      [event.currentTarget.name]: event.currentTarget.value,\n    };\n    // we need to pass key(index attribute) down from Inventory\n    this.props.updateFish(this.props.index, updatedFish);\n  };\n\n  render() {\n    return (\n     <div className=\"fish-edit\">\n      <input name=\"name\" \n             onChange={this.handleChange} \n             value={this.props.fish.name} \n             type=\"text\" \n             />\n      <input name=\"price\" \n             onChange={this.handleChange} \n             value={this.props.fish.price} \n             type=\"text\" \n             />\n      <select name=\"status\" \n              onChange={this.handleChange} \n              value={this.props.fish.status}>\n        <option value=\"available\">Fresh!</option>\n        <option value=\"unavailable\">Sold Out!</option>\n      </select>\n      <textarea name=\"desc\" \n                onChange={this.handleChange} \n                value={this.props.fish.desc}\n               />\n      <input name=\"image\" \n             onChange={this.handleChange} \n             value={this.props.fish.image} \n             type=\"text\" \n             />\n      <button onClick={()=> this.props.deleteFish(this.props.index)}> Remove Fish  </button>\n     </div>\n    );\n  }\n}\n\nexport default EditFishForm;\n\n// This is what is happening in our handleChange method:\n   // we need to create an updated fish object then swim upstream from \n    //    EditFishForm, to Inventory, then to App to get the updated fish\n    //    back into our state.\n    // Update that fish\n    // 1. take a copy of the current fish \n    // need to update the properties of the object \n    // *** Computed Property Names-- where we essentially want the value\n    //  that's being updated to also be dynamic- square brackets and event.currentTarget.name \n    //  'name' is the attribute we added to our inputs\n    // We are able to take a copy of the current fish object and overwrite\n    //   the one thing that changed.\n\n    // now we need to go up two levels to App to update our fishes status\n    //  with the new information entered.\n    //   ","import React from 'react';\nimport PropTypes from 'prop-types';\n    \n\n/* 'this' is not used since its a stateless component-- need to pass props to use it */\nconst Login = (props) => (\n  <nav className=\"login\">\n    <h2>Inventory Login</h2>\n    <p>Sign in to manage your store's inventory</p>\n    <button className=\"github\" onClick={() => props.authenticate('Github')}>Log In With GitHub </button>\n    <button className=\"twitter\" onClick={() => props.authenticate('Twitter')}>Log In With Twitter</button>\n    <button className=\"facebook\" onClick={() => props.authenticate('Facebook')}>Log In With Facebook</button>\n\n  </nav>\n\n);\n\nLogin.propTypes = {\n  authenticate: PropTypes.func.isRequired,\n};\n\nexport default Login;","import Rebase from 're-base';\nimport firebase from 'firebase';\n\n// configure our application\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyB2ifqPuHlj35o9fdXsr3jkJZ6gmyVprYs\",\n  authDomain: \"catchofthedaylaural.firebaseapp.com\",\n  databaseURL: \"https://catchofthedaylaural.firebaseio.com\",\n});\n\n// create our rebase binding\n//database() is a function that will return the actual database that we have \nconst base = Rebase.createClass(firebaseApp.database());\n\n// this is a name export\nexport { firebaseApp }\n\n// this is a default export\nexport default base;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport firebase from 'firebase';\nimport AddFishForm from './AddFishForm';\nimport EditFishForm from './EditFishForm';\nimport Login from './Login';\nimport base, { firebaseApp } from \"../base\";\n\n\n\nclass Inventory extends React.Component {\n  static propTypes = {\n    addFish: PropTypes.func,\n    updateFish: PropTypes.func,\n    deleteFish: PropTypes.func,\n    loadSampleFishes: PropTypes.func,\n    fishes: PropTypes.object,\n    storeId: PropTypes.string,\n  };\n\n  state = {\n    uid: null,\n    owner: null,\n  }\n\n  componentDidMount() {\n    // we're checking to see if we were already logged in when the page \n    //  reloaded. \n    firebase.auth().onAuthStateChanged(user => {\n      if(user) {\n        this.authHandler({user});\n      }\n    })\n  }\n\n  authHandler = async(authData) => {\n    // 1. look up the current store in the firebase database\n    const store = await base.fetch(this.props.storeId, { context: this });\n    console.log(store);\n    // 2. claim it there is no owner\n    if(!store.owner) {\n      //save it as our own\n      await base.post(`${this.props.storeId}/owner`, { data: authData.user.uid })\n    }\n    // 3. set the state of the inventory component to reflect the current user\n    //  this state is only local to this component!! \n    this.setState({\n      uid: authData.user.uid,\n      owner: store.owner || authData.user.uid,\n    });\n  \n  }\n\n  authenticate = (provider) => {\n    const authProvider = new firebase.auth[`${provider}AuthProvider`]();\n    firebaseApp.auth().signInWithPopup(authProvider).then(this.authHandler);\n  }\n\n  logout = async () => {\n    console.log(\"logging out!\");\n    await firebase.auth().signOut();\n    this.setState({ uid: null });\n  }\n\n  render() {\n    const logout = <button onClick={this.logout}>Log Out!</button>\n\n    // 1. check if they are logged in\n    if(!this.state.uid) {\n      return <Login authenticate={this.authenticate}/>;\n    }\n    //2. check if they are not the owner of the store \n    if(this.state.uid !== this.state.owner) {\n      return <div>\n        <p>Sorry you are not the owner!</p>\n        {logout}\n        </div>\n     \n    }\n    \n    // 3. if they are the owner, just render the inventory\n    return (\n      <div className=\"inventory\">\n        <h2>Inventory</h2>\n        {logout}\n        {Object.keys(this.props.fishes).map(key => \n        <EditFishForm key={key} \n                      index={key}\n                      fish={this.props.fishes[key]}\n                      updateFish={this.props.updateFish}\n                      deleteFish={this.props.deleteFish}\n        />\n        )}\n        {/* the addFish method gets passed down but need to use this.props\n        because the addFish method does not live on Inventory- its a prop of Inventory */}\n       <AddFishForm addFish={this.props.addFish}/>\n       {/* our function to load samples needs to live in App.js\n       because any methods that updates state needs to live in that \n       same component where our state lives.\n       the method passed down now is a prop of Inventory.js*/}\n       <button onClick={this.props.loadSampleFishes}>Load Sample Fishes</button>\n      </div>\n    );\n  }\n}\n\nexport default Inventory;","// This is just some sample data so you don't have to think of your own!\nconst fishes = {\n  fish1: {\n    name: \"Pacific Halibut\",\n    image: \"/images/hali.jpg\",\n    desc:\n      \"Everyone’s favorite white fish. We will cut it to the size you need and ship it.\",\n    price: 1724,\n    status: \"available\"\n  },\n\n  fish2: {\n    name: \"Lobster\",\n    image: \"/images/lobster.jpg\",\n    desc:\n      \"These tender, mouth-watering beauties are a fantastic hit at any dinner party.\",\n    price: 3200,\n    status: \"available\"\n  },\n\n  fish3: {\n    name: \"Sea Scallops\",\n    image: \"/images/scallops.jpg\",\n    desc:\n      \"Big, sweet and tender. True dry-pack scallops from the icey waters of Alaska. About 8-10 per pound\",\n    price: 1684,\n    status: \"unavailable\"\n  },\n\n  fish4: {\n    name: \"Mahi Mahi\",\n    image: \"/images/mahi.jpg\",\n    desc:\n      \"Lean flesh with a mild, sweet flavor profile, moderately firm texture and large, moist flakes. \",\n    price: 1129,\n    status: \"available\"\n  },\n\n  fish5: {\n    name: \"King Crab\",\n    image: \"/images/crab.jpg\",\n    desc:\n      \"Crack these open and enjoy them plain or with one of our cocktail sauces\",\n    price: 4234,\n    status: \"available\"\n  },\n\n  fish6: {\n    name: \"Atlantic Salmon\",\n    image: \"/images/salmon.jpg\",\n    desc:\n      \"This flaky, oily salmon is truly the king of the sea. Bake it, grill it, broil it...as good as it gets!\",\n    price: 1453,\n    status: \"available\"\n  },\n\n  fish7: {\n    name: \"Oysters\",\n    image: \"/images/oysters.jpg\",\n    desc: \"A soft plump oyster with a sweet salty flavor and a clean finish.\",\n    price: 2543,\n    status: \"available\"\n  },\n\n  fish8: {\n    name: \"Mussels\",\n    image: \"/images/mussels.jpg\",\n    desc:\n      \"The best mussels from the Pacific Northwest with a full-flavored and complex taste.\",\n    price: 425,\n    status: \"available\"\n  },\n\n  fish9: {\n    name: \"Jumbo Prawns\",\n    image: \"/images/prawns.jpg\",\n    desc:\n      \"With 21-25 two bite prawns in each pound, these sweet morsels are perfect for shish-kabobs.\",\n    price: 2250,\n    status: \"available\"\n  }\n};\n\nexport default fishes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {formatPrice} from '../helpers';\n\n\n\nclass Fish extends React.Component {\n static propTypes = {\n    details: PropTypes.shape({\n      image: PropTypes.string,\n      name: PropTypes.string,\n      desc: PropTypes.string, \n      status: PropTypes.string,\n      price: PropTypes.number,\n    }),\n    addToOrder: PropTypes.func,\n  }\n  \n  // how do we get the information from state to this Fish component?\n  // state needs to be passed down via props\n  //if you need access to the key , you have to pass it\n     //   a second time with a prop\n\n  handleClick = () => {\n   this.props.addToOrder(this.props.index);\n  }  \n\n  render() {\n    const {image, name, price, desc, status } = this.props.details;\n    const isAvailable = status === 'available';\n    return (\n    <li className=\"menu-fish\">\n      <img src={image} alt={name}/>\n    <h3 className=\"fish-name\">{name}\n    <span className=\"price\">{formatPrice(price)}</span>\n    </h3>\n    <p>{desc}</p>\n    {/* adding the onClick can be done as a one liner instead like this:\n    onClick={() => this.props.addToOrder(this.props.index)} \n    and eliminate the handleClick*/}\n    <button disabled={!isAvailable} onClick={this.handleClick}>\n      {isAvailable ? 'Add To Order ' : 'Sold Out!'}\n    </button>\n    </li>\n    )\n  }\n}\n\nexport default Fish;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from './Header.js';\nimport Order from './Order.js';\nimport Inventory from './Inventory.js';\nimport sampleFishes from '../sample-fishes.js';\nimport Fish from './Fish.js';\nimport base from '../base.js';\nimport { checkPropTypes } from 'prop-types';\n\n// we need to mirror our state to firebase, we need to wait \n// until the app component is on th epage then then \n//we'll start to sync them up\n// we'll use Lifecycle Methods-- tell us when certain things\n//    are happening. \n\nclass App extends React.Component {\n     // need to add an empty state to start- inital state can be either\n     //  set in the constructor() \n     // constructor() {\n       // super();\n       // this.state = {}\n     // }\n     // *** or can use a property-- Wes' preferred way\n    \n     state = {\n       fishes: {},\n       order: {}\n     };\n\n     static propTypes = {\n       match: PropTypes.object,\n      }\n\n     componentDidMount() {\n       const { params } = this.props.match;\n       // first rinstate our local storage\n       const localStorageRef = localStorage.getItem(params.storeId);\n       // if there is a lcoalStorageRef, we're going to reinstate it (if its a store we've\n       //   already visited)\n       // we're trying to render out order before fishes actually exist- \n       //   it takes a split second to go to Firebase to get our database\n       // \n       if(localStorageRef) {\n        // turns localStorageRef back into an object for setState\n         this.setState({ order: JSON.parse(localStorageRef) });\n       }\n       console.log(localStorageRef);\n       // this is diff than the ref we used in input\n       // ref in firebase are a reference to a piece of data in the database\n       // syncState also requires and object- a context and the state\n       this.ref = base.syncState(`${params.storeId}/fishes`, {\n         context: this,\n         state: 'fishes'\n       });\n     }\n     \n     // update user's order data in localstorage\n     componentDidUpdate() {\n       console.log(this.state.order);\n       // put into our local storage- the arguments are the key and values\n       localStorage.setItem(this.props.match.params.storeId, JSON.stringify(this.state.order));\n     }\n\n     // need to unlisten - helps to clean up any memory leaks,any memory issues\n     // this life cycle is as soon as the component is unmounting\n     componentWillUnmount() {\n       base.removeBinding(this.ref);\n     }\n  \n\n     // **** the methods that update state and the actual state always need to live\n     //   in the exact same component\n     // create a method:\n     addFish = (fish) => {\n        // In order to update state you need to use their existing set \n     //   state API.\n      // two steps:\n      // 1. take a copy of the existing state- you always take a copy because you never\n      // want to reach into state and modify it directly (that is a mutation in JS)- can cause issues\n      //  with perfomrance, things updating out of order.\n      const fishes = {...this.state.fishes};\n      // 2. add our new fish to that fishes variable\n       fishes[`fish${Date.now()}`] = fish;\n       // 3. set the new fishes object to state\n       // takes our old fishes object in state and overwrites it with our\n       // new fishes object we've just created- this triggers a change in react\n       //   and if they are displayed anywhere on the page, the proper changes are made \n       this.setState({\n         fishes: fishes\n        });\n     }\n\n     // takes 2 args- a key for which obj was updated, and also takes \n     //  the updatedFish\n     // need to pass updateFish down to Inventory to EditFishForm\n     updateFish = (key, updatedFish) => {\n       //1. take a copy of the current state\n       const fishes = {...this.state.fishes}\n       // 2. update that state\n       fishes[key] = updatedFish;\n       // 3. set that to state\n       this.setState({fishes: fishes});\n     }\n\n     // takes arg key for whih fish we'd like to delete\n     deleteFish = (key) => {\n      // 1. take a copy of state\n      const fishes = {...this.state.fishes}\n      // 2. update the state - set the fish we don't want to 'null'\n      // for Firebase to also remove it you must set it to 'null'\n      fishes[key] = null;\n      console.log(key);\n      // 3. Update state\n      this.setState({fishes: fishes});\n\n     }\n\n     loadSampleFishes = () => {\n       console.log(\"loading fish samples\");\n       this.setState({fishes: sampleFishes});\n     };\n\n     addToOrder = (key) => {\n       //1. take a copy of state\n       const order = {...this.state.order};\n       // 2. either add to the order or update the number in our order\n       order[key] = order[key] + 1 || 1;\n       // 3. call setState to update our order state object\n       this.setState({order: order});\n     } \n     \n     removeFromOrder = (key) => {\n    //1. take a copy of state\n       const order = {...this.state.order};\n     // 2. Remove item from order- since we are not mirroring to Firebase\n     //   we an use the Delete keyword\n       delete order[key];\n    // 3. call setState to update our order state object\n       this.setState({order: order});\n     }\n\n  render() { \n    return (\n      <div className=\"catch-of-the-day\">\n        <div className=\"menu\">\n          <Header tagline=\"Fresh Seafood Market\" age={100  }/>\n          <ul className=\"fishes\">\n            {/* JSX has no logic built into it- need to use reg. JS.\n            each child in an array or iterator should have a unique 'key' prop */}\n            {Object.keys(this.state.fishes).map(key => (\n              // passing attribute of index to access the key for each fish\n              // can't use the name key as it is used for soemthing else in react\n              < Fish \n                key={key} \n                index={key} \n                addToOrder={this.addToOrder} \n                details={this.state.fishes[key]} \n              />\n            )\n            )}    \n          </ul>\n        </div>\n        {/* can do an object spread to pass down all objects in state\n        {...this.state} if all of the state is needed */}\n        <Order fishes={this.state.fishes} \n                order={this.state.order}\n                removeFromOrder={this.removeFromOrder} />\n        <Inventory addFish={this.addFish}\n        loadSampleFishes={this.loadSampleFishes}\n        fishes={this.state.fishes}\n        updateFish={this.updateFish}\n        deleteFish={this.deleteFish}\n        storeId={this.props.match.params.storeId}\n        />     \n      </div>\n    )\n  }\n}\n\nexport default App;\n\n//props- are the way we get data into a component.  they're a bit like attributes\n//   we'll have data that lives in our App, and we'll need some \n//   way to get the data from App into our components.\n//  Or, if someone is going to pass data into a component, then\n//    how do we then access it from inside that component.\n//  Props is how the data gets to where it needs to go.\n// Props is kind of like and object of data that got passed in,\n//    kind of like an argument's object in a function of everything\n//    that got passed in.\n// \n\n// state -- is where the data lives\n//  ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getFunName } from '../helpers';\n\n//very component we have is its own class\nclass StorePicker extends React.Component {\n  // a class needs at least ONE method\n  // one of the methods has to be 'render'\n  // render determines what html or DOM elements are to be\n  //   rendered to the page\n  // clasName is used instad of class\n  // to return multiple lines for html, place the code in\n  //   parens, it'll follow the BEDMAS rule\n  // From a render method you can only return ONE element\n  //    you can't return sibling elements\n  //    You can return many elements inside a parent element, \n  //    You just can't return sibling elements\n  // The solution is to wrap them in a React.Fragment tag\n  // This allows us to return as many adjacent elements as we want\n  // Soon we may be to enclose the adj elements in empty opening and\n  //    closing tags <></> *** Can use these now! \n  // commenting in JSX is different, need to use curly brackets\n  //    and JS block comments\n\n  //**** IMPORTANT YOU CANNOT return both a comment and an\n  //   element-- if you need to have a comment you must put it inside\n  //    of your returned element...it reads it as an adjacent\n  //    jsx selector if not.\n  // render() {\n  //   return (\n  //     <React.Fragment>\n  //       <p>Fish!</p>\n  //       <form action=\"\" className=\"store-selector\">\n  //         {/* a comment in JSX */}\n  //        <h2>Please Enter A Store</h2>\n  //       </form> \n  //     </React.Fragment>\n  //   )\n  // }\n\n  // the default action of a form is to take all the inputs that \n      //  have names and submit that data to either the action \n      // of the form - or subit it to the same page.\n      // the form submitting is actually refreshing the page. \n      // If you're not using a server side form handler, and are handling\n      // it right in JS,  \n      // Pass the function the event, and call preventDefault \n      //    on the event to prevent the refresh default action\n  \n  // to bind our own methods to 'this'\n  // the constructor function/ method, is a method that will run \n  //  before the StorePicker component is created.\n  // \n  // constructor() {\n  //   // can't run anything in constructor until you call super()\n  //   // super() first runs the component that we're extending - React.component\n  //   super();\n  //   // in construtor we can bind all the methods\n  //   // it will 'this' inside of goToStore as the StorePicker instance\n  //   // if you don't bind it, 'this' in goToStore will be undefined\n  //   this.goToStore = this.goToStore.bind(this);\n  // } \n\n  // using the constructor() can get quite big if you have many methods,\n  // a solution is instead of declaring a method on the component, we \n  //    instead declare a property - which is going to be set to an arrow \n  //    function.\n  // *** properties will be bound to the instance rather than nothing.\n  //      then we'll be able to access 'this' inside of it. \n\n  myInput = React.createRef();\n\n  static propTypes = {\n    history: PropTypes.object,\n  }\n  \n  goToStore = (event) => {\n    // 1. stop form from submitting\n    event.preventDefault();\n    // 2. get the text from that input\n    // ** golden rule in DOM is, don't touch the DOM--don't go and\n    // manually select the elements. \n    // There are two ways to handle inputs, refs and and syncing \n    //  the text of the input into something called state.\n    const storeName = this.myInput.current.value;  \n    // 3. change the page to /store/whatever-they-entered.\n    // change the URL with push state\n    // push state allows to change the url without having to refresh the page\n    // or lose anything that we have in memory. React Router\n    this.props.history.push(`/store/${storeName}`);\n    \n  }\n  \n  render() {\n    return (\n      <form className=\"store-selector\" onSubmit={this.goToStore}>\n        <h2>Please Enter A Store</h2>\n        \n        {/* values of inputs always needs to be directly attached\n           to state!!! If you want a default value in react, you need\n            to use the defaultValue attribute */}\n        <input type=\"text\" \n              ref={this.myInput}  \n              required placeholder=\"Store Name\" \n              defaultValue={getFunName()}/>\n        <button type=\"submit\">Visit Store ➡</button>\n      </form>\n    )\n  }\n }\n\n export default StorePicker;\n","import React from 'react';\n\nconst NotFound = () => (\n  <div>\n    <h2>Not Found!!!!!!</h2>\n  </div>\n)\n\n\nexport default NotFound;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport StorePicker from './StorePicker';\nimport App from './App';\nimport NotFound from './NotFound';\n\n\n\nconst Router = () => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/\" component={StorePicker}/> \n      <Route path=\"/store/:storeId\" component={App}/>\n      <Route component={NotFound} />\n    </Switch>\n  </BrowserRouter>\n)\n\n// inside the Switch tag will be all our routes.\n// The way the Switch tag works is that its going to \n// try the first route, if it doesn't match it'll try the\n//  next route. if there is no match, it'll fall back to the \n//  'not found' route.\n//  You tell it what component to render out.\n// We have to render out the router to our mounting point\n// Otherwise we're not going to be able to see it working.\n// That is done in our index.js file.\n//  \n// path=\"/store/store:Id\" - a catchall for anything forward slash\n//    and any sort of store name.\n// \n\nexport default Router;","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App.js';\nimport Router from './components/Router.js';\n// loading CSS, CSS can be written in files to pertain to\n//  one specific component and then just loaded into \n// that component- it is just imported into the component\n// Or it can be imported into the index.js file --one css file or many.\nimport './css/style.css';\n\n// the render method takes 2 things:\n//  1. it takes some jsx\n//  2. a mounting point- an actual DOM element to mount it\n//    to the page.\nrender(<Router />, document.querySelector('#main'));\n\n\n//The App component is like the mama compoent that holds\n// all of the children.  \n// We will have a header component that shows us the title\n// we'll have a bunch of fish components which will render out\n//    a picture ,title, a description and the abiity to add it \n//    to our order\n// An order component, \n// An inventory component\n// these all will be siblings and a child of the App component\n// it will allow us to share things like data, methods.\n// essentializes the data and the functionality\n\n// ==== Stateless Functional Components ====\n// if a component doesn't really 'do anything' and they have\n//  the data fed to them.  There's no need for it to be a full \n//  blown react component, it just renders out some HTML.\n// If your component only has a render method and prop-types\n//  then its unnecessary to do the full way to create a component.\n//  If your component only has a render method and prop-types\n//  then its unnecessary to do the full way to create a component.\n//  --- we can convert it over to a Stateless Functional Component\n//   \n\n// ==== Routing with React Router ====\n// routing isn't baked into react. they defer it to an external component.\n// react router is one and Next.js is another.\n//  the router is its own compoment (router.js)\n\n// ==== Helper and Utility Functions\n// Helper functions that do something but aren't necessarily related to\n//    react.  helper.js\n// Utility Functions, functions that are helpful to doing tasks\n//  and are functions we use over in varous projects. utils.js\n\n\n// ==== Events, Refs, and 'this' Binding ====\n// events are pretty much the same- only difference in react is\n//    it wraps it in a Synthetic Event-  which is just a cross browser\n//    - it makes sure it works across all of the different browsers and all\n//    the different devices. \n// Events are done inline in react\n//  you only provide the name of the function and not the parens, we don't\n//    want it to run on page load, when the component mounts.\n//    we want it to run when someone clicks on it. \n\n// // ** golden rule in DOM is, don't touch the DOM--don't go and\n    // manually select the elements. \n    // There are two ways to handle inputs, refs and syncing \n    //  the text of the input into something called state.\n  // Ref in React allows us to reference an actual DOM note on the page.\n  // the attribute ref=\"myInput\" is depricated.\n  // A function ref- harder to understand.  You give it a function\n  //   ref={(myInput) => this.myInput = myInput} <-- this is more confusing\n  // A simpler way to reference any element on the page:\n  //  create a ref above your render()\n  // myInput = React.createRef(); <-- creates and empty ref\n  // then go down into the render() and set the ref attribute to\n  //    this.myInput.\n  // This surfaces the input on the component to be able to \n  //    ahead and grab it. \n  //  'this' is equal to the component, but if we reference 'this'\n  //    in a function, \n  // we need to use a lifecycle event.\n  // componentDidMount() will run as soon at the component mounts\n  //  or is put onto the page.\n  // All of the built in methods with React, are in the main component React\n  //    any components we add on, are not bound ('this') by default.\n  // That means its hard to reference the component inside one of\n  //    its own methods.\n  // \n  // Solution is to bind our own methods as well. \n  // using the constructor() can get quite big if you have many methods,\n  // a solution is instead of declaring a method on the component, we \n  //    instead declare a property - which is going to be set to an arrow \n  //    function.\n  // *** properties will be bound to the instance rather than nothing.\n  //      then we'll be able to access 'this' inside of it. \n\n  // ==== State ====\n  // **** State is essentially an object that lives inside\n  //   a component that stores all of the data that\n  //  that component and maybe some of its children need.\n  //  State is just an object that holds data that itself needs,\n  //    as well as some children may need.\n  // Can think of State as a single source of truth,\n  //   meaning that when using Vanilla JS and Jquery, \n  //   we may store our data in many places, a variable, an\n  //   attribute on a DOM -- with React the golden rule\n  //   is 'don't touch the DOM', and instead of updating\n  //    all the pieces on our website, we want to think about\n  //    just updating our data and letting React take it.\n  // With React you simply keep your data in State and\n  //  whenever state changes, React will react to that change,\n  //  it knows where you've used the particular data anywhere\n  //  in the application-- it will then go and forward and update\n  //  that changed data in all the different pieces on the website.\n  //\n  // how do we get fish into state and where does state live? Every \n  // component in react can have its own state. Its often the case \n  // where you have one parent state on a higher component and then \n  // you pass that state down to the children.\n    // right now this fish object is limited to only this AddFishForm \n    // component, if we want to give it to order and inventory and the menu-- \n    // there's no way to share the data with those other components-- \n    // unless the data lives at a higher level.\n    // We want the data to live in App- its the highest level \n    // and can then pass any data down to the children\n    // You can't pass data up, but you can always pass data down\n    //\n        // need to add an empty state to start- inital state can be either\n     //  set in the constructor() \n     // constructor() {\n       // super();\n       // this.state = {}\n     // }\n     // *** or can use a property-- Wes' preferred way \n      // **** the methods that update state and the actual state always need to live\n     //   in the exact same component \n     // need to create a method to add a fish. Need to pass that method down\n     //    2 levels-- AddFishForm is in Inventory is in App\n     //  Pass it down using props\n     // \n     // **** In order to update state you need to use their existing set \n     //   state API.\n\n     // ==== Displaying State with JSX ===\n     // see the Fish.js and App.js\n\n     // ==== Updating our Order State\n     // **** if you need access to the key , you have to pass it\n     //   a second time with a prop\n\n     // ====Diplaying Order State with JSX\n\n     // ==== Persisting our State with Firebase ====\n     // to store data to reload every visit to the app\n\n     // === Persisting Order State with localstorage ===\n     // to store data temporarily for a user.\n     // local storage is a key /value token. you can come back\n     //   to your app and pull it back into your app\n     \n     // *** when you try to put an object where a string is required\n     //   it returns [object object]\n     //  we need to first convert that object to a string\n     //   representation.\n    //  JSON.strinify(object);\n\n    // ==== Bi-diretional Data Flow and Live State Editing ==== \n\n    // === Removing Items from State ==== \n    // C Create\n    // R Read \n    // U Update \n    // D Delete\n\n    // === Animating React Components ====\n    // 2 diff animations in our project, a mounting and unmounting of\n  //    of different components\n  // Animating the component didMount and animating the component willUnmount\n  // The 2nd way is, when we have something change, we want to be able to\n  //    animate that up and down.\n  //    \n  \n\n  // === Component Validation with PropTypes ===\n  // with PropTypes we can sort of validate the data that is \n  //  being passed in to make sure we're passing the right \n  //   kind of data that it's looking for and the data is being passed\n  //  in that it actually looks the way we're expecting it to be\n  //  passed in. \n  // PropTypes allows us ahead of time to specify what\n  //  needs to be passed in when its used and \n  //  if soeone doesn't pass in the right type of data or \n  //  the right amount of data, then we're going to give\n  //   them a warning in their console telling them that\n  //   that they failed their PropType \n  // PropTypes are a development helper, they don't go to production\n  // *** stop and write your PropTypes immediately when you add\n  //    a prop to a component! "],"sourceRoot":""}